# -*- coding: utf-8 -*-
"""Dish_recommendation_system.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TQU7Y8Mm5cGObRlFcW5LlwYkIFavfHfv
"""

import pandas as pd
from sklearn.preprocessing import OneHotEncoder, StandardScaler
from sklearn.metrics.pairwise import cosine_similarity

# Loading the dataset with the appropriate encoding
file_path ="/content/sample_data/NEWFOOD.csv"

try:
    df = pd.read_csv(file_path, encoding='utf-8')
except UnicodeDecodeError:
    df = pd.read_csv(file_path, encoding='latin1')

# Strip any whitespace from column names
df.columns = df.columns.str.strip()

if 'price' not in df.columns:
    print("\nError: 'price' column not found in the DataFrame.")
else:
    df['price'] = df['price'].str.replace('[^\d.]', '', regex=True)  # Remove non-numeric characters
    df['price'] = df['price'].replace('', '0')  # Replace empty strings with '0'
    df['price'] = df['price'].astype(float)  # Convert to float


#Data Preprocessing
    df = df.dropna()

    categorical_features = ['cuisine', 'course', 'diet']
    encoder = OneHotEncoder()
    encoded_features = encoder.fit_transform(df[categorical_features]).toarray()

    encoded_df = pd.DataFrame(encoded_features, columns=encoder.get_feature_names_out(categorical_features))

    features = pd.concat([encoded_df], axis=1)

    features['name'] = df['name'].values
    features['price'] = df['price'].values

# Defining a function to get recommendations based on user preferences
    def get_recommendations(user_preferences, features, min_price, max_price, top_n=5):
        filtered_df = df[(df['cuisine'] == user_preferences['cuisine']) &
                         (df['course'] == user_preferences['course']) &
                         (df['diet'] == user_preferences['diet']) &
                         (df['price'] >= min_price) &
                         (df['price'] <= max_price)]

# If the number of matches is more than 5, calculating cosine similarity to get top n
        if len(filtered_df) > top_n:
            filtered_encoded = encoder.transform(filtered_df[categorical_features]).toarray()
            filtered_features = pd.DataFrame(filtered_encoded, columns=encoder.get_feature_names_out(categorical_features))

            user_encoded = encoder.transform(pd.DataFrame([user_preferences], columns=categorical_features)).toarray()
            user_profile = pd.DataFrame(user_encoded, columns=encoder.get_feature_names_out(categorical_features))

            similarity = cosine_similarity(user_profile, filtered_features)

            top_indices = similarity[0].argsort()[-top_n:][::-1]
            recommendations = filtered_df.iloc[top_indices][['name', 'price']].values
        else:
            recommendations = filtered_df[['name', 'price']].values

        return recommendations


# Menu-driven program
    def main_menu():
      print("                WELCOME TO THE PINNACLE's DISH RECOMMENDATION SYSTEM     ")
      print("Discover your next favorite dish with personalized suggestions based on your preferences.")
      while True:
            print("\nDish Recommendation System")
            print("1. Get Dish Recommendations")
            print("2. Exit")

            choice = input("Enter your choice: ")

            if choice == '1':
                user_cuisine = input("Enter cuisine (e.g., Italian, Mexican, etc.): ")
                user_course = input("Enter course (e.g., Main Course, Dessert, Appetizer, etc.): ")
                user_diet = input("Enter diet (e.g., Vegetarian, Non-Vegetarian, Vegan, etc.): ")
                min_price = float(input("Enter minimum price: "))
                max_price = float(input("Enter maximum price: "))

                user_preferences = {
                    'cuisine': user_cuisine,
                    'course': user_course,
                    'diet': user_diet
                }

                recommendations = get_recommendations(user_preferences, features, min_price, max_price)
                print("Recommended Dishes with Prices:")
                for i, (dish, price) in enumerate(recommendations, start=1):
                    print(f"{i}. Dish: {dish}, Price: {price}")

            elif choice == '2':
                print("Exiting the program.")
                break

            else:
                print("Invalid choice. Please try again.")

    if __name__ == "__main__":
        main_menu()
